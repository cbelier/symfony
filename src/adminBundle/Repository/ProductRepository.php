<?php

namespace adminBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    public function myFindAll() {
        $query = $this->getEntityManager()
            ->createQuery('
            SELECT prod
            FROM adminBundle:Product prod
            ');

        $query = $this->getEntityManager()->createQueryBuilder()
            -select("prod")
            ->from("adminbundle:Product", "prod")
            ->getQuery();
        return $query->getResult();
    }

    //Autre méthode plus courte
    public function findProduct(){
            //Le paramètre product est un alias
            $results = $this->createQueryBuilder('product')//equivalent à un findAll()
            ->select('product.description', 'product.price', 'brand.title')
            ->join('product.brand', 'brand')
            ->setMaxResults(5)
            ->setFirstResult(0)
            ->where('product.description = :desc')
            ->andWhere('product.price > :price')
            ->andWhere('product.title LIKE :brand')
            ->setParameters([
                    'desc' => "Description du produit 1",
                    'price' => 10,
                    ':brand' => '%marque%'
                ])
            ->getQuery()
            ->getResult();
        die(dump($results));
        return $results;
    }

    public function findReg(){
        //Le paramètre product est un alias
        $results = $this->createQueryBuilder('product')//equivalent à un findAll()
        ->select('product.description', 'product.price', 'brand.title')
            ->join('product.brand', 'brand')
            ->setMaxResults(5)
            ->setFirstResult(0)
            ->where('product.description = :desc')
            ->andWhere('product.price > :price')
            ->setParameters([
                'desc' => "Description du produit 1",
                'price' => 10
            ])
            ->getQuery()
            ->getResult();
        die(dump($results));
        return $results;
    }


    public function myFind($id) {

        // Creation d'une requête DQL
        // find() maison
        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT prod
                          FROM adminBundle:Product prod
                          WHERE prod.id = :identifiant
                    ')->setParameters(['identifiant' => $id]);

        // Plusieurs paramètres
     // ->setParameters([
      	//	'identifiant' => $id,
        //  'autre_variable' => $autre
     // ])

        //getSingleScalarResult() pour utliser un résultat style count

        // Création d'une requête grâce au builder
        // findAll() maison
        /*
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select("prod")
            ->from("adminBundle:Product", "prod")
            ->getQuery();
        */

        //die(dump($query->getResult()));

        return $query->getResult();
    }


    public function findByQuantity($id) {

        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT prod
                          FROM adminBundle:Product AS prod
                          WHERE prod.quantity < :identifiant
                    ')->setParameters(['identifiant' => $id]);

        die(dump($query->getResult()));

        return $query->getResult();
    }

    public function findbystock() {

        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT prod
                          FROM adminBundle:Product AS prod
                          ORDER BY prod.quantity DESC
                    ');
//                    ->setMaxResults(3)

        return $query->getResult();
    }

    public function findByQuantityStrict($id) {

        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT COUNT(prod)
                          FROM adminBundle:Product AS prod
                          WHERE prod.quantity = :quantity
                    ')->setParameters(['quantity' => $id]);

        die(dump($query->getSingleScalarResult()));

        return $query->getSingleScalarResult();
    }


    public function nbProduct() {

        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT COUNT(prod)
                          FROM adminBundle:Product AS prod
                    ');


        return $query->getSingleScalarResult();
    }

    public function nbProductByCat($id) {

        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT COUNT(prod)
                          FROM adminBundle:Product AS prod
                    ')->setParameters(['id' => $id]);


        return $query->getSingleScalarResult();
    }

    public function totalQteProduits() {

        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT SUM(prod.quantity)
                          FROM adminBundle:Product prod
                    ');

        die(dump($query->getSingleScalarResult()));

        return $query->getSingleScalarResult();
    }

    // Afficher les produits selon leur catégories
    public function myFindProductionSelonCategorie($categorie_id, $nbProductPerPage, $offset) {
        $results = $this
            ->createQueryBuilder('p')
            ->join('p.categories', 'c')
            ->where('c.id = :idCat')
            ->setParameters(['idCat' => $categorie_id])
            ->setFirstResult($offset)
            ->setMaxResults($nbProductPerPage)
            ->getQuery()
            ->getResult();
        return $results;
    }

    public function myFindProduction($nbProductPerPage, $offset) {
        $results = $this
            ->createQueryBuilder('p')
            ->setFirstResult($offset)
            ->setMaxResults($nbProductPerPage)
            ->getQuery()
            ->getResult();
        return $results;
    }

    public function findProductByLocale($id, $locale){
        $locale = strtoupper($locale); // on met en majuscule

        $result = $this->createQueryBuilder('product')
            ->select('product.id', "product.title$locale AS title", "product.description$locale", "product.image", "product.price")
            ->where('product.id = :id')
            ->setParameters([
                'id' => $id
            ])
            ->getQuery()
            ->getOneOrNullResult();
        return $result;
    }


}
